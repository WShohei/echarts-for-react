{"version":3,"file":"core.js","sourceRoot":"","sources":["../src/core.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nconst EChartsReactCore: React.FC<EChartsReactProps> = (props) => {\n  const {\n    echarts,\n    shouldSetOption,\n    theme,\n    opts,\n    onEvents,\n    onChartReady,\n    option,\n    notMerge = false,\n    lazyUpdate = false,\n    showLoading,\n    loadingOption = null,\n    style,\n    className = '',\n  } = props;\n\n  const eleRef = useRef<HTMLElement | null>(null);\n  const isInitialResizeRef = useRef(true);\n  const [echartsInstance, setEchartsInstance] = useState<EChartsInstance | null>(null);\n\n  const dispose = useCallback(() => {\n    if (eleRef.current) {\n      try {\n        clear(eleRef.current);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      echarts.dispose(eleRef.current);\n    }\n  }, [echarts]);\n\n  const resize = useCallback(() => {\n    if (echartsInstance && !isInitialResizeRef.current) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    isInitialResizeRef.current = false;\n  }, [echartsInstance]);\n\n  const updateEChartsOption = useCallback((): EChartsInstance => {\n    const echartInstance = echarts.getInstanceByDom(eleRef.current) || echarts.init(eleRef.current, theme, opts);\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n    return echartInstance;\n  }, [echarts, theme, opts, option, notMerge, lazyUpdate, showLoading, loadingOption]);\n\n  const renderNewEcharts = useCallback(() => {\n    const echartInstance = updateEChartsOption();\n    setEchartsInstance(echartInstance);\n\n    if (isFunction(onChartReady)) onChartReady(echartInstance);\n\n    if (eleRef.current) {\n      bind(eleRef.current, () => {\n        resize();\n      });\n    }\n\n    if (onEvents) {\n      Object.entries(onEvents).forEach(([eventName, func]) => {\n        if (isString(eventName) && isFunction(func)) {\n          echartInstance.on(eventName, (param) => {\n            func(param, echartInstance);\n          });\n        }\n      });\n    }\n  }, [updateEChartsOption, onChartReady, resize, onEvents]);\n\n  useEffect(() => {\n    renderNewEcharts();\n    return () => dispose();\n  }, [renderNewEcharts, dispose]);\n\n  useEffect(() => {\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    const prevProps = { option, notMerge, lazyUpdate, showLoading, loadingOption, style, className };\n\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, props)) {\n      return;\n    }\n\n    if (!isEqual(pick(props, pickKeys), pick(prevProps, pickKeys))) {\n      updateEChartsOption();\n    }\n\n    if (!isEqual(prevProps.style, style) || !isEqual(prevProps.className, className)) {\n      resize();\n    }\n  }, [props, shouldSetOption, style, className, updateEChartsOption, resize]);\n\n  const newStyle = { height: 300, ...style };\n\n  return (\n    <div\n      ref={(e: HTMLElement) => {\n        eleRef.current = e;\n      }}\n      style={newStyle}\n      className={`echarts-for-react ${className}`}\n    />\n  );\n};\n\nexport default EChartsReactCore;\n"]}